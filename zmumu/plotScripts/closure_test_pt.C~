
void  closure_test_pt(){

 gROOT->SetStyle("Plain");
 gStyle -> SetErrorX(0);
 // TFile *fdataeff= new TFile("output_data_iso025.root");
 // TFile *fdataeff= new TFile("output_data_dimu_pt.root");
 TFile *fdata= new TFile("tnpZ_theTreeCleaned_data_eff_new_test.root");
// TFile *fmc= new TFile("effMCpathor_new.root");



 TCanvas *c = new TCanvas("c","The Ntuple canvas",200,10,700,780);
  c->SetFillColor(10); 

    c->Divide(1,2); 
   
   
   gStyle->SetStatW(0.30);
   gStyle->SetStatH(0.20);
   gStyle->SetStatColor(42);
   gStyle->SetOptStat(""); //em
   gStyle->SetLabelSize(0.048,"xy");
   gStyle->SetLabelOffset(0.013,"x");
   gStyle->SetLabelOffset(0.013,"y");
   gStyle->SetPadBorderMode(0);
   gStyle->SetFillColor(0);
   gStyle->SetPadTickX(1);
   gStyle->SetPadTickY(1);

  TLatex *t = new TLatex();
   t->SetNDC();
   t->SetTextFont(62);
   t->SetTextColor(36);
   t->SetTextSize(0.08);
   t->SetTextAlign(12);

///////////////////////////////////////////


   c_1 -> cd();
   c->cd(1); 
   c_1 ->SetLogx();
   c_1 ->SetLogy();
     
 gPad->SetTopMargin(0.08);
 gPad->SetLeftMargin(0.163);
 gPad->SetBottomMargin(0.16);
 gPad->SetRightMargin(0.143);
   
//TH1F  *hrpTtest = (TH1F*)hrpTtest  -> Clone(); 

fdata -> cd("tpTree");
//fmceff -> ls();

TH1F  *hrpTtest1 = (TH1F*)hrpTtest1  -> Clone(); 
//TH1F  *hrpTtest1 = (TH1F*)hrpTtest1  -> Clone(); 
hrpTtest1 -> Sumw2();
//hrpTtest1 -> Sumw2();


// cout << hrpTtest1 -> GetBinContent(1,1) << "  ,  " << hrpTtest1 -> GetBinError(1,1) << "\n";
gStyle->SetPalette(1);
hrpTtest1->Draw("COLZ");

/*
   hrRatio -> GetXaxis()->SetNdivisions(505);
   hrRatio -> GetYaxis()->SetNdivisions(505);
   hrRatio-> GetXaxis() -> SetTitleColor(1);
   hrRatio-> GetXaxis() -> SetTitleOffset(1.);
   hrRatio-> GetXaxis() -> SetTitleSize(0.06);
   hrRatio-> GetXaxis() -> SetTitle("#mu pt");

   hrRatio-> GetYaxis() -> SetTitleColor(1);
   hrRatio-> GetYaxis() -> SetTitleOffset(1.);
   hrRatio-> GetYaxis() -> SetTitleSize(0.06);
   hrRatio-> GetYaxis() -> SetTitle("#mu pt");
*/


gStyle->SetPaintTextFormat("3.4f ");

hrpTtest1->SetMarkerSize(1.8);
hrpTtest1->Draw("TEXT E1 Same");



/////////////////////////////////////////////////////////////////////////
 
   c_2 -> cd();
   c->cd(2); 
   c_2 ->SetLogx();
   c_2 ->SetLogy();
     
 gPad->SetTopMargin(0.08);
 gPad->SetLeftMargin(0.163);
 gPad->SetBottomMargin(0.16);
 gPad->SetRightMargin(0.143);
   
//TH1F  *hrpTtest = (TH1F*)hrpTtest  -> Clone(); 

fdata -> cd("tpTree");
//fmceff -> ls();

TH1F  *hrpTtest = (TH1F*)hrpTtest  -> Clone(); 
TH1F  *hrpTtest1 = (TH1F*)hrpTtest1  -> Clone(); 
hrpTtest -> Sumw2();
//hrpTtest1 -> Sumw2();

    int nBinsX = hrpTtest->GetNbinsX();
    int nBinsY = hrpTtest1->GetNbinsY();

 cout << hrpTtest1 -> GetBinContent(1,1) << "  ,  " << hrpTtest1 -> GetBinError(1,1) << "\n";
 cout << hrpTtest -> GetBinContent(1,1) << "  ,  " << hrpTtest -> GetBinError(1,1) << "\n";


TH1 *hrRatio = (TH1F*)hrpTtest1 -> Clone(); 
hrRatio -> Divide(hrpTtest1, hrpTtest,1.,1.,"B");
// hrpTtest1-> Divide(hrpTtest);

// cout << hrpTtest1 -> GetBinContent(1,1) << "  ,  " << hrpTtest1 -> GetBinError(1,1) << "\n";
gStyle->SetPalette(1);
hrRatio->Draw("COLZ");

   hrRatio -> GetXaxis()->SetNdivisions(505);
   hrRatio -> GetYaxis()->SetNdivisions(505);
   hrRatio-> GetXaxis() -> SetTitleColor(1);
   hrRatio-> GetXaxis() -> SetTitleOffset(1.);
   hrRatio-> GetXaxis() -> SetTitleSize(0.06);
   hrRatio-> GetXaxis() -> SetTitle("#mu pt");

   hrRatio-> GetYaxis() -> SetTitleColor(1);
   hrRatio-> GetYaxis() -> SetTitleOffset(1.);
   hrRatio-> GetYaxis() -> SetTitleSize(0.06);
   hrRatio-> GetYaxis() -> SetTitle("#mu pt");



gStyle->SetPaintTextFormat("3.4f ");

hrRatio->SetMarkerSize(1.8);
hrRatio->Draw("TEXT E1 Same");

/*
TH1F  *hrpTtestMinus = (TH1F*)hrRatio -> Clone(); 


    int nBinsX = hrpTtestMinus->GetNbinsX();
    int nBinsY = hrpTtestMinus->GetNbinsY();
    // double content, error, sigmaA, sigmaB, contA, contB, errorA, errorB;

    for (int i(1); i <= nBinsY ; i++) {
        for (int j(1); j <= nBinsX; j++) {

        //   cout <<"i,j = " << i << ","<< j << " , "<<  1.-hrRatio->GetBinError(j, i) << "\n";
        //   hrRatio -> SetBinError(j,i,1.-hrRatio->GetBinError(j, i));
        //   cout <<"i,j = " << i << ","<< j << " , "<<  hrRatio->GetBinContent(j, i) << "\n";

         hrpTtestMinus -> SetBinContent(j,i,-hrRatio->GetBinContent(j, i));
         hrpTtestMinus -> SetBinError(j,i,hrRatio->GetBinError(j, i));
       // cout << hrpTtest-> GetBinContent(1,1) << "\n";
        }
    }

   t->SetTextColor(1);
   t->SetTextSize(0.04);
 // t->DrawLatex(0.1,0.95, "True" );
*/

   c-> Print("test_pt.pdf"); 


   c->cd();
   c->Update();

}
